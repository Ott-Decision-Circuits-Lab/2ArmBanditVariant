function FigHandle = Analysis(DataFile)
% 2ArmBanditVariant Analysis Function
% Developed by Nina Grimme & Antonio Lee @ BCCN Berlin
% Version 1.0 ~ April 2023

if nargin < 1
    global BpodSystem
    if isempty(BpodSystem) || isempty(BpodSystem.Data)
        DataFolder = OttLabDataServerFolderPath;
        [datafile, datapath] = uigetfile(DataFolder);
        load(fullfile(datapath, datafile));
        SessionDateTime = datapath(end-15:end-1);
    else
        SessionData = BpodSystem.Data;
        [~, name, ~] = fileparts(BpodSystem.Path.CurrentDataFile);
        SessionDateTime = name(end-14:end);
    end
elseif ischar(DataFile) || isstring(DataFile)
    load(DataFile);
    SessionDateTime = DataFile(end-18:end-4);
elseif isstruct(DataFile)
    SessionData = DataFile;

    % mismatch in time saved in .mat and the time used as file name
    SessionDateTime = strcat(datestr(SessionData.Info.SessionDate, 'yyyymmdd'), '_000000');
else
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

%% Load related data to local variabels
RatID = str2double(SessionData.Info.Subject);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);
% %%The following three lines doesn't not work, as the timestamp documented
% in the SessionData may not be the same as the one being used for saving
% Date = datestr(SessionData.Info.SessionDate, 'yyyymmdd');

nTrials = SessionData.nTrials;
if nTrials < 50
    disp('nTrial < 50. Impossible for analysis.')
    FigHandle = [];
    return
end
ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
Baited = SessionData.Custom.TrialData.Baited(:, 1:nTrials);
IncorrectChoice = SessionData.Custom.TrialData.IncorrectChoice(1:nTrials);
NoDecision = SessionData.Custom.TrialData.NoDecision(1:nTrials);
NoTrialStart = SessionData.Custom.TrialData.NoTrialStart(1:nTrials);
BrokeFixation = SessionData.Custom.TrialData.BrokeFixation(1:nTrials);
EarlyWithdrawal = SessionData.Custom.TrialData.EarlyWithdrawal(1:nTrials);
StartNewTrial = SessionData.Custom.TrialData.StartNewTrial(1:nTrials);
SkippedFeedback = SessionData.Custom.TrialData.SkippedFeedback(1:nTrials);
Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);

SampleTime = SessionData.Custom.TrialData.SampleTime(1:nTrials);
MoveTime = SessionData.Custom.TrialData.MoveTime(1:nTrials);
FeedbackWaitingTime = SessionData.Custom.TrialData.FeedbackWaitingTime(1:nTrials);
% FeedbackDelay = SessionData.Custom.TrialData.FeedbackDelay(1:nTrials);
% FeedbackWaitingTime = rand(nTrials,1)*10; %delete this
% FeedbackWaitingTime = FeedbackWaitingTime';  %delete this
% FeedbackDelay = rand(nTrials,1)*10; %delete this
% FeedbackDelay= FeedbackDelay'; 

RewardProb = SessionData.Custom.TrialData.RewardProb(:, 1:nTrials);
LightLeft = SessionData.Custom.TrialData.LightLeft(1:nTrials);
LightLeftRight = [LightLeft; 1-LightLeft]; 
ChoiceLeftRight = [ChoiceLeft; 1-ChoiceLeft]; 

BlockNumber = SessionData.Custom.TrialData.BlockNumber(:, 1:nTrials);
BlockTrialNumber = SessionData.Custom.TrialData.BlockTrialNumber(:, 1:nTrials);

% for files before April 2023, no DrinkingTime is available
try
    DrinkingTime = SessionData.Custom.TrialData.DrinkingTime(1:nTrials);
catch
    DrinkingTime = nan(1, nTrials);
end

LeftFeedbackDelayGraceTime = [];
RightFeedbackDelayGraceTime = [];
FirstDrinkingTime = [];
LatestRewardTimestamp = [];
for iTrial = 1:nTrials
    if ChoiceLeft(iTrial) == 1
        LeftFeedbackDelayGraceTime = [LeftFeedbackDelayGraceTime;...
                                      SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,2) -...
                                      SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,1)];
    elseif ChoiceLeft(iTrial) == 0
        RightFeedbackDelayGraceTime = [RightFeedbackDelayGraceTime;...
                                       SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,2) -...
                                       SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,1)];
    end
    
    FirstDrinkingTime = [FirstDrinkingTime SessionData.RawEvents.Trial{iTrial}.States.Drinking(1,1)];
    if iTrial == 1
        LatestRewardTimestamp(iTrial) = 0;
    elseif isnan(SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1))
        LatestRewardTimestamp(iTrial) = LatestRewardTimestamp(iTrial-1);
    else
        LatestRewardTimestamp(iTrial) = SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1) + SessionData.TrialStartTimestamp(iTrial-1);
    end
end
LatestRewardTime = SessionData.TrialStartTimestamp - LatestRewardTimestamp;

LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(~isnan(LeftFeedbackDelayGraceTime))';
LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(LeftFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(~isnan(RightFeedbackDelayGraceTime))';
RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(RightFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);

%% Common plots regardless of task design/ risk type
% colour palette for events (suitable for most colourblind people)
scarlet = [254, 60, 60]/255; % for incorrect sign, contracting with azure
denim = [31, 54, 104]/255; % mainly for unsuccessful trials
azure = [0, 162, 254]/255; % for rewarded sign

neon_green = [26, 255, 26]/255; % for NotBaited
neon_purple = [168, 12, 180]/255; % for SkippedBaited

sand = [225, 190 106]/255; % for left-right
turquoise = [64, 176, 166]/255;
LRPalette = [sand; turquoise];

% colour palette for cues: (1- P(r)) * 128 + 127
% P(0) = white; P(1) = smoky gray
RewardProbCategories = unique(RewardProb);
CuedPalette = ((1 - RewardProbCategories) * [128 128 128] + 127)/255;

% create figure
FigHandle = figure('Position', [   0       0     842    1191],... % DIN A3, 72 ppi (window will crop it to _ x 1024, same as disp resolution)
                   'NumberTitle', 'off',...
                   'Name', strcat(RatName, '_', SessionDateTime),...
                   'MenuBar', 'none',...
                   'Resize', 'off');

%% overview of events across session
TrialOverviewAxes = axes(FigHandle, 'Position', [0.01    0.77    0.46    0.20]);
hold(TrialOverviewAxes, 'on');
set(TrialOverviewAxes,...
    'TickDir', 'out',...
    'YAxisLocation', 'right',...
    'YLim', [0,10],...
    'YTick', 1:9,...
    'YTickLabel', {'NoTrialStart', 'BrokeFixation', 'EarlyWithdrawal',...
                   'NoDecision', 'StartNewTrial', 'IncorrectChoice',...
                   'Rewarded', 'NotBaited', 'SkippedBaited'},...
    'FontSize', 12);
xlabel(TrialOverviewAxes, 'nTrial', 'FontSize', 14);

idxTrial = 1:nTrials;
NoTrialStartndxTrial = idxTrial(NoTrialStart == 1);
NoTrialStartLine = line(TrialOverviewAxes,...
                        'xdata', NoTrialStartndxTrial,...
                        'ydata', ones(size(NoTrialStartndxTrial)) * 1,...
                        'LineStyle', 'none',...
                        'Marker', '.',...
                        'MarkerEdge', denim);

BrokeFixationndxTrial = idxTrial(BrokeFixation == 1);
BrokeFixationLine = line(TrialOverviewAxes,...
                         'xdata', BrokeFixationndxTrial,...
                         'ydata', ones(size(BrokeFixationndxTrial)) * 2,...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerEdge', denim);

EarlyWithdrawalndxTrial = idxTrial(EarlyWithdrawal == 1);
EarlyWithdrawalLine = line(TrialOverviewAxes,...
                           'xdata', EarlyWithdrawalndxTrial,...
                           'ydata', ones(size(EarlyWithdrawalndxTrial)) * 3,...
                           'LineStyle', 'none',...
                           'Marker', '.',...
                           'MarkerEdge', denim);

NoDecisionndxTrial = idxTrial(NoDecision == 1);
NoDecisionLine = line(TrialOverviewAxes,...
                      'xdata', NoDecisionndxTrial,...
                      'ydata', ones(size(NoDecisionndxTrial)) * 4,...
                      'LineStyle', 'none',...
                      'Marker', '.',...
                      'MarkerEdge', denim);

StartNewTrialndxTrial = idxTrial(StartNewTrial == 1);
StartNewTrialLine = line(TrialOverviewAxes,...
                         'xdata', StartNewTrialndxTrial,...
                         'ydata', ones(size(StartNewTrialndxTrial)) * 5,...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerEdge', denim);

IncorrectChoicendxTrial = idxTrial(IncorrectChoice == 1);
IncorrectChoiceLine = line(TrialOverviewAxes,...
                           'xdata', IncorrectChoicendxTrial,...
                           'ydata', ones(size(IncorrectChoicendxTrial)) * 6,...
                           'LineStyle', 'none',...
                           'Marker', '.',...
                           'MarkerEdge', scarlet);

RewardedndxTrial = idxTrial(Rewarded == 1);
RewardedHandle = line(TrialOverviewAxes,...
                    'xdata', RewardedndxTrial,...
                    'ydata', ones(size(RewardedndxTrial)) * 7,...
                    'LineStyle', 'none',...
                    'Marker', '.',...
                    'MarkerEdge', azure);

NotBaited = any(~Baited .* ChoiceLeftRight, 1) & (IncorrectChoice ~= 1);
NotBaitedndxTrial = idxTrial(NotBaited == 1);
NotBaitedLine = line(TrialOverviewAxes,...
                     'xdata', NotBaitedndxTrial,...
                     'ydata', ones(size(NotBaitedndxTrial)) * 8,...
                     'LineStyle', 'none',...
                     'Marker', '.',...
                     'MarkerEdge', neon_green);

SkippedBaited = any(Baited .* ChoiceLeftRight .* [SkippedFeedback; SkippedFeedback], 1) & (IncorrectChoice ~= 1);
SkippedBaitedndxTrial = idxTrial(SkippedBaited == 1); % Choice made is Baited but Skipped
SkippedBaitedLine = line(TrialOverviewAxes,...
                         'xdata', SkippedBaitedndxTrial,...
                         'ydata', ones(size(SkippedBaitedndxTrial)) * 9,...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerEdge', neon_purple);

BlockSwitchndxTrial = idxTrial(BlockTrialNumber == 1);
BlockSwitchPlot = plot(TrialOverviewAxes,...
                       [BlockSwitchndxTrial; BlockSwitchndxTrial],...
                       [10*ones(size(BlockSwitchndxTrial)); zeros(size(BlockSwitchndxTrial))],...
                       'Color', [0.5 0.5 0.5],...
                       'LineStyle', ':',...
                       'Marker', 'none');

%% count and ratio of events per cue
EventOverviewAxes = axes(FigHandle, 'Position', [0.76    0.77    0.22    0.20]);
hold(EventOverviewAxes, 'on');
YTickLabel = {strcat(num2str(nTrials), ' | 100%'),...
              strcat(num2str(length(NoTrialStartndxTrial)), ' | ', sprintf('%04.1f', 100*length(NoTrialStartndxTrial)/nTrials), '%'),...
              strcat(num2str(length(BrokeFixationndxTrial)), ' | ', sprintf('%04.1f', 100*length(BrokeFixationndxTrial)/nTrials), '%'),...
              strcat(num2str(length(EarlyWithdrawalndxTrial)), ' | ', sprintf('%04.1f', 100*length(EarlyWithdrawalndxTrial)/nTrials), '%'),...
              strcat(num2str(length(NoDecisionndxTrial)), ' | ', sprintf('%04.1f', 100*length(NoDecisionndxTrial)/nTrials), '%'),...
              strcat(num2str(length(StartNewTrialndxTrial)), ' | ', sprintf('%04.1f', 100*length(StartNewTrialndxTrial)/nTrials), '%'),...
              strcat(num2str(length(IncorrectChoicendxTrial)), ' | ', sprintf('%04.1f', 100*length(IncorrectChoicendxTrial)/nTrials), '%'),...
              strcat(num2str(length(RewardedndxTrial)), ' | ', sprintf('%04.1f', 100*length(RewardedndxTrial)/nTrials), '%'),...
              strcat(num2str(length(NotBaitedndxTrial)), ' | ', sprintf('%04.1f', 100*length(NotBaitedndxTrial)/nTrials), '%'),...
              strcat(num2str(length(SkippedBaitedndxTrial)), ' | ', sprintf('%04.1f', 100*length(SkippedBaitedndxTrial)/nTrials), '%'),...
              'Count |       %'};

set(EventOverviewAxes,...
    'TickDir', 'out',...
    'XLim', [0, 100],...
    'YLim', [0, 10],...
    'YTick', 0:10,...
    'YTickLabel', YTickLabel,...
    'FontSize', 12);
xlabel(EventOverviewAxes, 'Proportion (%)', 'FontSize', 12);
title('Event Proportion', 'FontSize', 12)

if any(isnan(LightLeft)) % usually 2-arm task
    TrialRewardProb = max(RewardProb .* ChoiceLeftRight, [], 1);
    xdata = 7:9;
else % usually 1-arm task
    TrialRewardProb = max(RewardProb .* LightLeftRight, [], 1);
    xdata = 3:9;
end

TrialDataTable = table(TrialRewardProb', EarlyWithdrawal', NoDecision', StartNewTrial',...
                       IncorrectChoice', Rewarded', NotBaited', SkippedBaited',...
                       ChoiceLeft', SampleTime',MoveTime',...
                       FeedbackWaitingTime', DrinkingTime',...
                       'VariableNames',{'TrialRewardProb', 'EarlyWithdrawal', 'NoDecision', 'StartNewTrial',...
                                        'IncorrectChoice', 'Rewarded', 'NotBaited', 'SkippedBaited',...
                                        'ChoiceLeft', 'SampleTime', 'MoveTime',...
                                        'FeedbackWaitingTime', 'DrinkingTime'});

TrialDataTable = TrialDataTable(~isnan(TrialRewardProb), :); % filter out no choice for 2-arm version
RewardProbSortedEventMean = table2array(grpstats(fillmissing(TrialDataTable(:, 1:8), 'constant', 0), 'TrialRewardProb'));
RewardProbSortedEventCount = RewardProbSortedEventMean(:, 2) .* RewardProbSortedEventMean(:, xdata);
RewardProbSortedEventProportion = 100 * RewardProbSortedEventCount ./ sum(RewardProbSortedEventCount, 1);

ydata = RewardProbSortedEventProportion';
EventRatioBarchart = barh(EventOverviewAxes, xdata, ydata, 'stacked');

for i = 1:length(EventRatioBarchart)
    EventRatioBarchart(i).FaceColor = CuedPalette(i, :);
end

RewardProbLegend = string(RewardProbCategories)';
EventRatioLegend = legend(EventOverviewAxes, RewardProbLegend,...
                          'Position', [0.77    0.79    0.20    0.012],...
                          'NumColumns', 2);


% ??ABOVE maybe the percentage on the graph??

%% move time per cue/choice risk
MoveTimeAxes = axes(FigHandle, 'Position', [0.76    0.35    0.22    0.13]);
hold(MoveTimeAxes, 'on');

DecidedTrialData = TrialDataTable(TrialDataTable.NoDecision==0, :);
MoveTimeSwarmchart = [];
for i = 1:length(RewardProbCategories)
    MoveTimeSwarmchart(i) = swarmchart(MoveTimeAxes, DecidedTrialData(DecidedTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                       'TrialRewardProb', 'MoveTime',...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', CuedPalette(i,:),...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 0.15);
end

set(MoveTimeAxes,...
    'TickDir', 'out',...
    'XLim', [0, 1],...
    'YLim', [0, 1],...
    'FontSize', 10);
% title('Move Time', 'FontSize', 12)
xlabel(MoveTimeAxes, '')
ylabel(MoveTimeAxes, 'Move Time (s)', 'FontSize', 12, 'FontWeight', 'bold')

MoveTimeBoxChart = boxchart(MoveTimeAxes, DecidedTrialData.TrialRewardProb, DecidedTrialData.MoveTime);
set(MoveTimeBoxChart,...
    'BoxWidth', 0.05,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

MoveTimeStats = grpstats(DecidedTrialData,...
                         'TrialRewardProb', {'mean', 'std'},...
                         'DataVars', 'MoveTime',...
                         'VarNames', {'Pr', 'Count', 'Mean', 'Std'});

MoveTimeStatsText = [];
for i = 1:length(MoveTimeStats.Pr)
    MoveTimeStatsText(i) = text(MoveTimeAxes, RewardProbCategories(i), -0.35,...
                                sprintf('%3.0f\n%5.3f\n%5.3f',...
                                        MoveTimeStats.Count(i),...
                                        MoveTimeStats.Mean(i),...
                                        MoveTimeStats.Std(i)),...
                                'FontSize', 10,...
                                'HorizontalAlignment', 'center');
end
% MoveTimeStatsText(i+1) = text(MoveTimeAxes, 0, -0.35,...
%                               sprintf('Count\nMean\nStd'),...
%                               'FontSize', 10,...
%                               'HorizontalAlignment', 'right');

%% time investment for NotBaited per cue/choice risk
FeedbackWaitingTimeAxes = axes(FigHandle, 'Position', [0.76    0.09    0.22    0.16]);
hold(FeedbackWaitingTimeAxes, 'on');

NotBaitedTrialData = TrialDataTable(TrialDataTable.NotBaited==1, :);
FeedbackWaitingTimeSwarmchart = [];
for i = 1:length(RewardProbCategories)
    FeedbackWaitingTimeSwarmchart(i) = swarmchart(FeedbackWaitingTimeAxes, NotBaitedTrialData(NotBaitedTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                  'TrialRewardProb', 'FeedbackWaitingTime',...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', CuedPalette(i,:),...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.15);
end

set(FeedbackWaitingTimeAxes,...
    'TickDir', 'out',...
    'XLim', [0, 1],...
    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
    'FontSize', 10);
% title('NotBaited Invested Time', 'FontSize', 12)
xlabel(FeedbackWaitingTimeAxes, 'Reward Prob', 'FontSize', 12, 'FontWeight', 'bold')
ylabel(FeedbackWaitingTimeAxes, sprintf('NotBaited Waiting Time (s)'), 'FontSize', 12, 'FontWeight', 'bold')

FeedbackWaitingTimeBoxchart = boxchart(FeedbackWaitingTimeAxes, NotBaitedTrialData.TrialRewardProb, NotBaitedTrialData.FeedbackWaitingTime);
set(FeedbackWaitingTimeBoxchart,...
    'BoxWidth', 0.05,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

FeedbackWaitingTimeStats = grpstats(NotBaitedTrialData,...
                                    'TrialRewardProb', {'mean', 'std'},...
                                    'DataVars', 'FeedbackWaitingTime',...
                                    'VarNames', {'Pr', 'Count', 'Mean', 'Std'});

FeedbackWaitingTimeStatsText = [];
for i = 1:length(FeedbackWaitingTimeStats.Pr)
    FeedbackWaitingTimeStatsText(i) = text(FeedbackWaitingTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                           sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                   FeedbackWaitingTimeStats.Count(i),...
                                                   FeedbackWaitingTimeStats.Mean(i),...
                                                    FeedbackWaitingTimeStats.Std(i)),...
                                           'FontSize', 10,...
                                           'HorizontalAlignment', 'center');
end
% FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
%                                          sprintf('Count\nMean\nStd'),...
%                                          'FontSize', 10,...
%                                          'HorizontalAlignment', 'right');

%% move time per Left-Right
LRMoveTimeAxes = axes(FigHandle, 'Position', [0.57    0.35    0.10    0.13]);
hold(LRMoveTimeAxes, 'on');

LRTrialDataTable = table(1-ChoiceLeft', NoDecision', NotBaited',...
                         MoveTime', FeedbackWaitingTime', DrinkingTime',...
                         'VariableNames',{'ChoiceRight', 'NoDecision', 'NotBaited',...
                                          'MoveTime', 'FeedbackWaitingTime', 'DrinkingTime'});

LRDecidedTrialData = LRTrialDataTable(LRTrialDataTable.NoDecision==0, :);
LRMoveTimeSwarmchart = [];
for i = 1:2
    LRMoveTimeSwarmchart(i) = swarmchart(LRMoveTimeAxes, LRDecidedTrialData(LRDecidedTrialData.ChoiceRight == i-1, :),...
                                         'ChoiceRight', 'MoveTime',...
                                         'Marker', '.',...
                                         'MarkerEdgeColor', LRPalette(i,:),...
                                         'XJitter', 'density',...
                                         'XJitterWidth', 0.8);
end

set(LRMoveTimeAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [0, 1],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
% title('Move Time', 'FontSize', 12)
xlabel(LRMoveTimeAxes, '')
ylabel(LRMoveTimeAxes, '')

LRMoveTimeBoxchart = boxchart(LRMoveTimeAxes, LRDecidedTrialData.ChoiceRight, LRDecidedTrialData.MoveTime);
set(LRMoveTimeBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

LRMoveTimeStats = grpstats(LRDecidedTrialData,...
                           'ChoiceRight', {'mean', 'std'},...
                           'DataVars', 'MoveTime',...
                           'VarNames', {'LR', 'Count', 'Mean', 'Std'});

LRMoveTimeStatsText = [];
for i = 1:2
    LRMoveTimeStatsText(i) = text(LRMoveTimeAxes, i-1, -0.35,...
                                  sprintf('%3.0f\n%4.2f\n%4.2f',...
                                          LRMoveTimeStats.Count(i),...
                                          LRMoveTimeStats.Mean(i),...
                                          LRMoveTimeStats.Std(i)),...
                                  'FontSize', 10,...
                                  'HorizontalAlignment', 'center');
end
LRMoveTimeStatsText(i+1) = text(LRMoveTimeAxes, 1.5, -0.35,...
                                sprintf('Count\nMean\nStd'),...
                                'FontSize', 10,...
                                'HorizontalAlignment', 'left');

%% time investment for NotBaited per Left-Right
LRFeedbackWaitingTimeAxes = axes(FigHandle, 'Position', [0.57    0.09    0.10    0.16]);
hold(LRFeedbackWaitingTimeAxes, 'on');

LRNotBaitedTrialData = LRTrialDataTable(LRTrialDataTable.NotBaited==1, :);
LRFeedbackWaitingTimeSwarmchart = [];
for i = 1:2
    LRFeedbackWaitingTimeSwarmchart(i) = swarmchart(LRFeedbackWaitingTimeAxes, LRNotBaitedTrialData(LRNotBaitedTrialData.ChoiceRight == i-1, :),...
                                                    'ChoiceRight', 'FeedbackWaitingTime',...
                                                    'Marker', '.',...
                                                    'MarkerEdgeColor', LRPalette(i,:),...
                                                    'XJitter', 'density',...
                                                    'XJitterWidth', 0.8);
end

set(LRFeedbackWaitingTimeAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
% title('NotBaited Invested Time', 'FontSize', 12)
xlabel(LRFeedbackWaitingTimeAxes, '')
ylabel(LRFeedbackWaitingTimeAxes, '')

LRFeedbackWaitingTimeBoxchart = boxchart(LRFeedbackWaitingTimeAxes, LRNotBaitedTrialData.ChoiceRight, LRNotBaitedTrialData.FeedbackWaitingTime);
set(LRFeedbackWaitingTimeBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

LRFeedbackWaitingTimeStats = grpstats(LRNotBaitedTrialData,...
                                      'ChoiceRight', {'mean', 'std'},...
                                      'DataVars', 'FeedbackWaitingTime',...
                                      'VarNames', {'LR', 'Count', 'Mean', 'Std'});

LRFeedbackWaitingTimeStatsText = [];
for i = 1:2
    LRFeedbackWaitingTimeStatsText(i) = text(LRFeedbackWaitingTimeAxes, i-1, LRFeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                             sprintf('%3.0f\n%4.2f\n%4.2f',...
                                                     LRFeedbackWaitingTimeStats.Count(i),...
                                                     LRFeedbackWaitingTimeStats.Mean(i),...
                                                     LRFeedbackWaitingTimeStats.Std(i)),...
                                             'FontSize', 10,...
                                             'HorizontalAlignment', 'center');
end
LRFeedbackWaitingTimeStatsText(i+1) = text(LRFeedbackWaitingTimeAxes, 1.5, LRFeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                             sprintf('Count\nMean\nStd'),...
                                             'FontSize', 10,...
                                             'HorizontalAlignment', 'left');

%% FeedbackGrace per Left-Right
LRFeedbackDelayGraceTimeAxes = axes(FigHandle, 'Position', [0.57    0.57    0.10    0.13]);
hold(LRFeedbackDelayGraceTimeAxes, 'on');

if length(LeftFeedbackDelayGraceTime) > 2000 % down sample in case of multi-section analysis
    LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(rand(size(LeftFeedbackDelayGraceTime)) > 0.95);
end

if length(RightFeedbackDelayGraceTime) > 2000 % down sample in case of multi-section analysis
    RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(rand(size(RightFeedbackDelayGraceTime)) > 0.95);
end
LeftFeedbackDelayGraceTimeSwarmchart = swarmchart(LRFeedbackDelayGraceTimeAxes,...
                                                  zeros(length(LeftFeedbackDelayGraceTime)), LeftFeedbackDelayGraceTime,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', LRPalette(1,:),...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.8);

RightFeedbackDelayGraceTimeSwarmchart = swarmchart(LRFeedbackDelayGraceTimeAxes,...
                                                   ones(length(RightFeedbackDelayGraceTime)), RightFeedbackDelayGraceTime,...
                                                   'Marker', '.',...
                                                   'MarkerEdgeColor', LRPalette(2,:),...
                                                   'XJitter', 'density',...
                                                   'XJitterWidth', 0.8);

set(LRFeedbackDelayGraceTimeAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [0, max(SessionData.SettingsFile.GUI.FeedbackDelayGrace, 0.2)],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
title(sprintf('FeedbackDelay\nGrace Time'), 'FontSize', 12)
xlabel(LRFeedbackDelayGraceTimeAxes, '')
ylabel(LRFeedbackDelayGraceTimeAxes, '')


LeftFeedbackDelayGraceTimeStatsText = text(LRFeedbackDelayGraceTimeAxes, 0, LRFeedbackDelayGraceTimeAxes.YLim(2) * -0.3,...
                                             sprintf('%3.0f',...
                                                     length(LeftFeedbackDelayGraceTime)),...
                                             'FontSize', 10,...
                                             'HorizontalAlignment', 'center');

RightFeedbackDelayGraceTimeStatsText = text(LRFeedbackDelayGraceTimeAxes, 1, LRFeedbackDelayGraceTimeAxes.YLim(2) * -0.3,...
                                              sprintf('%3.0f',...
                                                      length(RightFeedbackDelayGraceTime)),...
                                              'FontSize', 10,...
                                              'HorizontalAlignment', 'center');

LRFeedbackDelayGraceTimeStatsText = text(LRFeedbackDelayGraceTimeAxes, 1.5, LRFeedbackDelayGraceTimeAxes.YLim(2) * -0.3,...
                                            sprintf('Count'),...
                                            'FontSize', 10,...
                                            'HorizontalAlignment', 'left');

%% Drinking Time
DrinkingTimeAxes = axes(FigHandle, 'Position', [0.46    0.09    0.05    0.13]);

DrinkingTime = DrinkingTime(~isnan(DrinkingTime)); % remove unnecesary plotting
if length(DrinkingTime) > 2000 % down sample in case of multi-section analysis
    DrinkingTime = DrinkingTime(rand(size(DrinkingTime)) > 0.95);
end
DrinkingTimeSwarmchart = swarmchart(DrinkingTimeAxes, ones(length(DrinkingTime)), DrinkingTime,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', 'k',...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 0.8);

set(DrinkingTimeAxes,...
    'TickDir', 'out',...
    'XLim', [0.5, 1.5],...
    'XTick', 1,...
    'XTickLabel', [], ...
    'YLim', [0, 15],...
    'FontSize', 10);
ylabel(DrinkingTimeAxes, 'Drinking Time (s)', 'FontSize', 12, 'FontWeight', 'bold')

%% ITI
ITIAxes = axes(FigHandle, 'Position', [0.35    0.09    0.05    0.13]);

ITI = SessionData.TrialStartTimestamp(2:end) - SessionData.TrialEndTimestamp(1:end-1);
ITI = ITI(ITI>0 & ITI<5); % remove outlier in case of multi-section analysis
if length(ITI) > 2000 % down sample in case of multi-section analysis
    ITI = ITI(rand(size(ITI)) > 0.95);
end
ITISwarmchart = swarmchart(ITIAxes,...
                           ones(length(ITI)), ITI,...
                           'Marker', '.',...
                           'MarkerEdgeColor', 'k',...
                           'XJitter', 'density',...
                           'XJitterWidth', 0.8);

set(ITIAxes,...
    'TickDir', 'out',...
    'XLim', [0.5, 1.5],...
    'XTick', 1,...
    'XTickLabel', [],...
    'YLim', [0, 1.5],...
    'FontSize', 10);
ylabel(ITIAxes, 'System ITI (s)', 'FontSize', 12, 'FontWeight', 'bold')


%% Trial Left-Right Move Time
TrialLRMoveTimeAxes = axes(FigHandle, 'Position', [0.01    0.63    0.46    0.08]);
hold(TrialLRMoveTimeAxes, 'on');

TrialLeftMoveTimeLine = line(TrialLRMoveTimeAxes,...
                             'xdata', idxTrial(ChoiceLeft==1),...
                             'ydata', MoveTime(ChoiceLeft==1),...
                             'LineStyle', 'none',...
                             'Marker', '.',...
                             'MarkerEdge', sand);

TrialRightMoveTimeLine = line(TrialLRMoveTimeAxes,...
                              'xdata', idxTrial(ChoiceLeft==0),...
                              'ydata', MoveTime(ChoiceLeft==0),...
                              'LineStyle', 'none',...
                              'Marker', '.',...
                              'MarkerEdge', turquoise);

set(TrialLRMoveTimeAxes,...
    'TickDir', 'out',...
    'Xlim', TrialOverviewAxes.XLim,...
    'XTickLabel', [],...
    'XAxisLocation', 'top',...
    'YLim', [0, 1],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
ylabel(TrialLRMoveTimeAxes, 'Move Time (s)')

%% Trial Left-Right NotBaited Invested Time (TI)
TrialLRTIAxes = axes(FigHandle, 'Position', [0.01    0.36    0.46    0.08]);
hold(TrialLRTIAxes, 'on');

TrialLeftTILine = line(TrialLRTIAxes,...
                       'xdata', idxTrial(NotBaited & ChoiceLeft==1),...
                       'ydata', FeedbackWaitingTime(NotBaited==1 & ChoiceLeft==1),...
                       'LineStyle', 'none',...
                       'Marker', '.',...
                       'MarkerEdge', sand);

TrialRightTILine = line(TrialLRTIAxes,...
                        'xdata', idxTrial(NotBaited==1 & ChoiceLeft==0),...
                        'ydata', FeedbackWaitingTime(NotBaited==1 & ChoiceLeft==0),...
                        'LineStyle', 'none',...
                        'Marker', '.',...
                        'MarkerEdge', turquoise);

set(TrialLRTIAxes,...
    'TickDir', 'out',...
    'Xlim', TrialOverviewAxes.XLim,...
    'XTickLabel', [],...
    'XAxisLocation', 'top',...
    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
ylabel(TrialLRTIAxes, sprintf('NotBaited\nWaiting Time (s)'))

%% Trial reward rate per trial
TrialRewardRateAxes = axes(FigHandle, 'Position', [0.01    0.54    0.46    0.08]);
hold(TrialRewardRateAxes, 'on');

RewardMagnitude = SessionData.Custom.TrialData.RewardMagnitude(:, 1:nTrials);
RewardedMagnitude = sum(RewardMagnitude .* ChoiceLeftRight) .* Rewarded;
RewardedMagnitude(isnan(RewardedMagnitude)) = 0;

TrialRewardRateLine = line(TrialRewardRateAxes,...
                           'xdata', idxTrial,...
                           'ydata', smooth(movmean(RewardedMagnitude, [9 0])),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', azure);

set(TrialRewardRateAxes,...
    'TickDir', 'out',...
    'Xlim', TrialOverviewAxes.XLim,...
    'XTickLabel', [],...
    'XAxisLocation', 'top',...
    'YAxisLocation', 'right',...
    'FontSize', 10);
ylabel(TrialRewardRateAxes, sprintf('Reward Rate\n(uL trial^{-1})'))

%% Trial reward rate per second
TrialRewardRateInSAxes = axes(FigHandle, 'Position', [0.01    0.45    0.46    0.08]);
hold(TrialRewardRateInSAxes, 'on');

TrialStartTimestamp = SessionData.TrialStartTimestamp(:, 1:nTrials) - SessionData.TrialStartTimestamp(1);
TrialTimeDuration = [0 diff(TrialStartTimestamp)];
YData = smooth(movsum(RewardedMagnitude, [9 0])./movsum(TrialTimeDuration, [9 0]));
YData(isinf(YData)) = nan;

% Another way by finding the trials within 200 s, then look up how many
% times been rewarded (NOT WORKING WELL)
% a = TrialStartTimestamp <= (TrialStartTimestamp'+200) & TrialStartTimestamp > TrialStartTimestamp';
% b = a * RewardedMagnitude';
% ydata = smooth(b'./200);

TrialRewardRateInSLine = line(TrialRewardRateInSAxes,...
                              'xdata', idxTrial,...
                              'ydata', YData,...
                              'LineStyle', '-',...
                              'Marker', 'none',...
                              'Color', azure);

set(TrialRewardRateInSAxes,...
    'TickDir', 'out',...
    'Xlim', TrialOverviewAxes.XLim,...
    'XTickLabel', [],...
    'XAxisLocation', 'top',...
    'YAxisLocation', 'right',...
    'FontSize', 10);
ylabel(TrialRewardRateInSAxes, sprintf('Reward Rate\n(uL s^{-1})'))

disp('YOu aRE a bEAutIFul HUmaN BeiNG.')
% title('Block switching behaviour')

%% Plot based on task design/ risk type
datafileExistence = exist('datafile', 'var');
DataFileExistence = exist('DataFile', 'var');
DataFolder = OttLabDataServerFolderPath;

switch SessionData.SettingsFile.GUIMeta.RiskType.String{SessionData.SettingsFile.GUI.RiskType}
    case 'Fix'
    % not yet implemented %

    case 'BlockRand'
    % not yet implemented %

    case 'BlockRandHolding'

    case 'BlockFix'
    % not yet implemented %
        %% overview of events across session
        title(TrialOverviewAxes, strcat(RatName, '_ ', SessionDateTime, '_BlockRandHolidng'), 'Interpreter', 'none')
    
        %% Dedicated Analysis script and figure saving for Matching
        if datafileExistence == 1
            AnalysisFigure = TwoArmBanditVariant_Matching_LauGlimcherGLM(fullfile(datapath, datafile));
            
            DataPath = strcat(DataFolder, RatName, '\bpod_session\', SessionDateTime, '\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            DataPath = strcat(DataFolder, RatName, '\bpod_graph\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            close(FigHandle)

        elseif DataFileExistence == 1 && (ischar(DataFile) | isstring(DataFile))
            AnalysisFigure = TwoArmBanditVariant_Matching_LauGlimcherGLM(DataFile);

            DataPath = strcat(DataFolder, RatName, '\bpod_session\', SessionDateTime, '\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            DataPath = strcat(DataFolder, RatName, '\bpod_graph\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            close(FigHandle)

        else
            AnalysisFigure = TwoArmBanditVariant_Matching_LauGlimcherGLM();
        end

    case 'BlockFixHolding'
        %% overview of events across session
        title(TrialOverviewAxes, strcat(RatName, '_ ', SessionDateTime, '_Matching'), 'Interpreter', 'none')
    
        %% Dedicated Analysis script and figure saving for Matching
        if datafileExistence == 1
            AnalysisFigure = TwoArmBanditVariant_Matching_LauGlimcherGLM(fullfile(datapath, datafile));
            
            DataPath = strcat(DataFolder, RatName, '\bpod_session\', SessionDateTime, '\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            DataPath = strcat(DataFolder, RatName, '\bpod_graph\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            close(FigHandle)

        elseif DataFileExistence == 1 && (ischar(DataFile) | isstring(DataFile))
            AnalysisFigure = TwoArmBanditVariant_Matching_LauGlimcherGLM(DataFile);

            DataPath = strcat(DataFolder, RatName, '\bpod_session\', SessionDateTime, '\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            DataPath = strcat(DataFolder, RatName, '\bpod_graph\',...
                              RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Analysis.png');
            exportgraphics(FigHandle, DataPath);
            
            close(FigHandle)
            
        else
            AnalysisFigure = TwoArmBanditVariant_Matching_LauGlimcherGLM();
        end
    
    case 'Cued' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(RatName, '_ ', SessionDateTime, '_CuedRisk'), 'Interpreter', 'none')
        
        %% sample time per cue
        SampleTimeAxes = axes(FigHandle, 'Position', [0.76    0.57    0.22    0.13]);
        hold(SampleTimeAxes, 'on');
        
        NotBrokeFixationTrialData = TrialDataTable(~isnan(TrialDataTable.EarlyWithdrawal), :);
        SampleTimeSwarmchat = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeSwarmchat(i) = swarmchart(SampleTimeAxes, NotBrokeFixationTrialData(NotBrokeFixationTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                'TrialRewardProb', 'SampleTime',...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', CuedPalette(i,:),...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 0.15);
        end
        
        StimulusTimeCutOffLine = line(SampleTimeAxes,...
                                      'xdata', [0, 1],...
                                      'ydata', [1, 1] * SessionData.SettingsFile.GUI.StimulusTime,...
                                      'LineStyle', ':',...
                                      'Marker', 'none');
        
        set(SampleTimeAxes,...
            'TickDir', 'out',...
            'XLim', [0, 1],...
            'YLim', [0, 1],...
            'FontSize', 10);
        title('Sampling Time', 'FontSize', 12)
        xlabel(SampleTimeAxes, '')
        ylabel(SampleTimeAxes, 'Time (s)')
        
        SampleTimeBoxChart = boxchart(SampleTimeAxes, NotBrokeFixationTrialData.TrialRewardProb, NotBrokeFixationTrialData.SampleTime);
        set(SampleTimeBoxChart,...
            'BoxWidth', 0.05,...
            'BoxFaceColor', 'k',...
            'BoxFaceAlpha', 0,...
            'MarkerStyle', 'none',...
            'LineWidth', 0.2);
        
        SampleTimeStats = grpstats(NotBrokeFixationTrialData,...
                                   'TrialRewardProb', {'mean', 'std'},...
                                   'DataVars', 'SampleTime',...
                                   'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
        
        SampleTimeStatsText = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeStatsText(i) = text(SampleTimeAxes, RewardProbCategories(i), -0.35,...
                                          sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                  SampleTimeStats.Count(i),...
                                                  SampleTimeStats.Mean(i),...
                                                  SampleTimeStats.Std(i)),...
                                          'FontSize', 10,...
                                          'HorizontalAlignment', 'center');
        end
        SampleTimeStatsText(i+1) = text(SampleTimeAxes, 0, -0.35,...
                                        sprintf('Count\nMean\nStd'),...
                                        'FontSize', 10,...
                                        'HorizontalAlignment', 'right');
        
        %% Dedicated Analysis script and figure saving for Matching
        AnalysisFigure = TwoArmBanditVariant_Cued();
        
    case 'BlockCued' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(RatName, '_', SessionDateTime, '_BlockCued', 'Interpreter', 'none'))

        %% sample time per cue
        SampleTimeAxes = axes(FigHandle, 'Position', [0.76    0.57    0.22    0.13]);
        hold(SampleTimeAxes, 'on');
        
        NotBrokeFixationTrialData = TrialDataTable(~isnan(TrialDataTable.EarlyWithdrawal), :);
        SampleTimeSwarmchat = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeSwarmchat(i) = swarmchart(SampleTimeAxes, NotBrokeFixationTrialData(NotBrokeFixationTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                'TrialRewardProb', 'SampleTime',...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', CuedPalette(i,:),...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 0.15);
        end
        
        StimulusTimeCutOffLine = line(SampleTimeAxes,...
                                      'xdata', [0, 1],...
                                      'ydata', [1, 1] * SessionData.SettingsFile.GUI.StimulusTime,...
                                      'LineStyle', ':',...
                                      'Marker', 'none');
        
        set(SampleTimeAxes,...
            'TickDir', 'out',...
            'XLim', [0, 1],...
            'YLim', [0, 1],...
            'FontSize', 10);
        title('Sampling Time', 'FontSize', 12)
        xlabel(SampleTimeAxes, '')
        ylabel(SampleTimeAxes, 'Time (s)')
        
        SampleTimeBoxChart = boxchart(SampleTimeAxes, NotBrokeFixationTrialData.TrialRewardProb, NotBrokeFixationTrialData.SampleTime);
        set(SampleTimeBoxChart,...
            'BoxWidth', 0.05,...
            'BoxFaceColor', 'k',...
            'BoxFaceAlpha', 0,...
            'MarkerStyle', 'none',...
            'LineWidth', 0.2);
        
        SampleTimeStats = grpstats(NotBrokeFixationTrialData,...
                                   'TrialRewardProb', {'mean', 'std'},...
                                   'DataVars', 'SampleTime',...
                                   'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
        
        SampleTimeStatsText = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeStatsText(i) = text(SampleTimeAxes, RewardProbCategories(i), -0.35,...
                                          sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                  SampleTimeStats.Count(i),...
                                                  SampleTimeStats.Mean(i),...
                                                  SampleTimeStats.Std(i)),...
                                          'FontSize', 10,...
                                          'HorizontalAlignment', 'center');
        end
        SampleTimeStatsText(i+1) = text(SampleTimeAxes, 0, -0.35,...
                                        sprintf('Count\nMean\nStd'),...
                                        'FontSize', 10,...
                                        'HorizontalAlignment', 'right');
        
    case 'CuedBlockRatio' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(RatName, '_', SessionDateTime, '_CuedBlockRatio', 'Interpreter', 'none'))

        %% sample time per cue
        SampleTimeAxes = axes(FigHandle, 'Position', [0.76    0.57    0.22    0.13]);
        hold(SampleTimeAxes, 'on');
        
        NotBrokeFixationTrialData = TrialDataTable(~isnan(TrialDataTable.EarlyWithdrawal), :);
        SampleTimeSwarmchat = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeSwarmchat(i) = swarmchart(SampleTimeAxes, NotBrokeFixationTrialData(NotBrokeFixationTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                'TrialRewardProb', 'SampleTime',...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', CuedPalette(i,:),...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 0.15);
        end
        
        StimulusTimeCutOffLine = line(SampleTimeAxes,...
                                      'xdata', [0, 1],...
                                      'ydata', [1, 1] * SessionData.SettingsFile.GUI.StimulusTime,...
                                      'LineStyle', ':',...
                                      'Marker', 'none');
        
        set(SampleTimeAxes,...
            'TickDir', 'out',...
            'XLim', [0, 1],...
            'YLim', [0, 1],...
            'FontSize', 10);
        title('Sampling Time', 'FontSize', 12)
        xlabel(SampleTimeAxes, '')
        ylabel(SampleTimeAxes, 'Time (s)')
        
        SampleTimeBoxChart = boxchart(SampleTimeAxes, NotBrokeFixationTrialData.TrialRewardProb, NotBrokeFixationTrialData.SampleTime);
        set(SampleTimeBoxChart,...
            'BoxWidth', 0.05,...
            'BoxFaceColor', 'k',...
            'BoxFaceAlpha', 0,...
            'MarkerStyle', 'none',...
            'LineWidth', 0.2);
        
        SampleTimeStats = grpstats(NotBrokeFixationTrialData,...
                                   'TrialRewardProb', {'mean', 'std'},...
                                   'DataVars', 'SampleTime',...
                                   'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
        
        SampleTimeStatsText = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeStatsText(i) = text(SampleTimeAxes, RewardProbCategories(i), -0.35,...
                                          sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                  SampleTimeStats.Count(i),...
                                                  SampleTimeStats.Mean(i),...
                                                  SampleTimeStats.Std(i)),...
                                          'FontSize', 10,...
                                          'HorizontalAlignment', 'center');
        end
        SampleTimeStatsText(i+1) = text(SampleTimeAxes, 0, -0.35,...
                                        sprintf('Count\nMean\nStd'),...
                                        'FontSize', 10,...
                                        'HorizontalAlignment', 'right');

        %% Single-session analysis
        if nTrials <= 2500 && nTrials >= 200
            %% Invested time per cue across session
            TrialInvestedTimeAxes = axes(FigHandle, 'Position', [0.01    0.60    0.48    0.11]);
            hold(TrialInvestedTimeAxes, 'on');
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                for i = 1:length(RewardProbCategories)
                    % NotBaited invested time per cue across session
                    CueSortedNotBaitedIdx = find(TrialDataTable.NotBaited & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    TrialNotBaitedInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedNotBaitedIdx, TrialDataTable.FeedbackWaitingTime(CueSortedNotBaitedIdx),...
                                                             'Marker', '.',...
                                                             'MarkerSize', 4,...
                                                             'MarkerEdgeColor', 1-CuedPalette(i,:),...
                                                             'Color', CuedPalette(i,:));
                    
                    Label{i} = sprintf('P(r) = %3.1f',...
                                       RewardProbCategories(i));
                    % [RValue, PValue] = corrcoef(TrialNotBaitedInvestedTimePlot(i).XData, TrialNotBaitedInvestedTimePlot(i).YData);
                    % CueSortedNotBaitedRvalue(i) = RValue(1, 2);
                    % CueSortedNotBaitedPValue(i) = PValue(1, 2);
                    % 
                    % Label{i} = sprintf('P(r) = %3.1f\nR = %5.2f\np = %6.3f',...
                    %                    RewardProbCategories(i),...
                    %                    CueSortedNotBaitedRvalue(i),...
                    %                    CueSortedNotBaitedPValue(i));
                end

                for i = 1:length(RewardProbCategories) % plot all NotBaited first for legend
                    % Incorrect invested time per Trial RewardProb (not Choice RewardProb) across session
                    CueSortedIncorrectChoiceIdx = find(TrialDataTable.IncorrectChoice == 1 & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    if isempty(CueSortedIncorrectChoiceIdx)
                        continue
                    end
                    TrialIncorrectChoiceInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedIncorrectChoiceIdx, TrialDataTable.FeedbackWaitingTime(CueSortedIncorrectChoiceIdx),...
                                                                   'Marker', '.',...
                                                                   'MarkerSize', 4,...
                                                                   'MarkerEdgeColor', scarlet .* CuedPalette(i,:),...
                                                                   'LineStyle', 'none');
                    
                end
                
                TrialInvestedTimeLegend = legend(TrialInvestedTimeAxes, Label,...
                                                 'Position', [0.01    0.58    0.28    0.02],...
                                                 'NumColumns', 2);

                set(TrialInvestedTimeAxes,...
                    'TickDir', 'out',...
                    'Xlim', TrialOverviewAxes.XLim,...
                    'XTickLabel', [],...
                    'XAxisLocation', 'top',...
                    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                    'YAxisLocation', 'right',...
                    'FontSize', 10);
                ylabel('Invested Time (s)')
                disp('YOu aRE a bEAutIFul HUmaN BeiNG.')
                % title('Block switching behaviour')
            end
        end

    case 'CuedBlockITI' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(RatName, '_', SessionDateTime, '_CuedBlockITI', 'Interpreter', 'none'))

        %% sample time per cue
        SampleTimeAxes = axes(FigHandle, 'Position', [0.76    0.57    0.22    0.13]);
        hold(SampleTimeAxes, 'on');
        
        NotBrokeFixationTrialData = TrialDataTable(~isnan(TrialDataTable.EarlyWithdrawal), :);
        SampleTimeSwarmchat = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeSwarmchat(i) = swarmchart(SampleTimeAxes, NotBrokeFixationTrialData(NotBrokeFixationTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                'TrialRewardProb', 'SampleTime',...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', CuedPalette(i,:),...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 0.15);
        end
        
        StimulusTimeCutOffLine = line(SampleTimeAxes,...
                                      'xdata', [0, 1],...
                                      'ydata', [1, 1] * SessionData.SettingsFile.GUI.StimulusTime,...
                                      'LineStyle', ':',...
                                      'Marker', 'none');
        
        set(SampleTimeAxes,...
            'TickDir', 'out',...
            'XLim', [0, 1],...
            'YLim', [0, 1],...
            'FontSize', 10);
        title('Sampling Time', 'FontSize', 12)
        xlabel(SampleTimeAxes, '')
        ylabel(SampleTimeAxes, 'Time (s)')
        
        SampleTimeBoxChart = boxchart(SampleTimeAxes, NotBrokeFixationTrialData.TrialRewardProb, NotBrokeFixationTrialData.SampleTime);
        set(SampleTimeBoxChart,...
            'BoxWidth', 0.05,...
            'BoxFaceColor', 'k',...
            'BoxFaceAlpha', 0,...
            'MarkerStyle', 'none',...
            'LineWidth', 0.2);
        
        SampleTimeStats = grpstats(NotBrokeFixationTrialData,...
                                   'TrialRewardProb', {'mean', 'std'},...
                                   'DataVars', 'SampleTime',...
                                   'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
        
        SampleTimeStatsText = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeStatsText(i) = text(SampleTimeAxes, RewardProbCategories(i), -0.35,...
                                          sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                  SampleTimeStats.Count(i),...
                                                  SampleTimeStats.Mean(i),...
                                                  SampleTimeStats.Std(i)),...
                                          'FontSize', 10,...
                                          'HorizontalAlignment', 'center');
        end
        SampleTimeStatsText(i+1) = text(SampleTimeAxes, 0, -0.35,...
                                        sprintf('Count\nMean\nStd'),...
                                        'FontSize', 10,...
                                        'HorizontalAlignment', 'right');

        %% Single-session analysis
        if nTrials <= 2500 && nTrials >= 200
            %% Invested time per cue across session
            TrialInvestedTimeAxes = axes(FigHandle, 'Position', [0.01    0.60    0.48    0.11]);
            hold(TrialInvestedTimeAxes, 'on');
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                for i = 1:length(RewardProbCategories)
                    % NotBaited invested time per cue across session
                    CueSortedNotBaitedIdx = find(TrialDataTable.NotBaited & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    TrialNotBaitedInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedNotBaitedIdx, TrialDataTable.FeedbackWaitingTime(CueSortedNotBaitedIdx),...
                                                             'Marker', '.',...
                                                             'MarkerSize', 4,...
                                                             'MarkerEdgeColor', 1-CuedPalette(i,:),...
                                                             'Color', CuedPalette(i,:));
                    
                    Label{i} = sprintf('P(r) = %3.1f',...
                                       RewardProbCategories(i));
                    % [RValue, PValue] = corrcoef(TrialNotBaitedInvestedTimePlot(i).XData, TrialNotBaitedInvestedTimePlot(i).YData);
                    % CueSortedNotBaitedRvalue(i) = RValue(1, 2);
                    % CueSortedNotBaitedPValue(i) = PValue(1, 2);
                    % 
                    % Label{i} = sprintf('P(r) = %3.1f\nR = %5.2f\np = %6.3f',...
                    %                    RewardProbCategories(i),...
                    %                    CueSortedNotBaitedRvalue(i),...
                    %                    CueSortedNotBaitedPValue(i));
                end

                for i = 1:length(RewardProbCategories) % plot all NotBaited first for legend
                    % Incorrect invested time per Trial RewardProb (not Choice RewardProb) across session
                    CueSortedIncorrectChoiceIdx = find(TrialDataTable.IncorrectChoice == 1 & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    if isempty(CueSortedIncorrectChoiceIdx)
                        continue
                    end
                    TrialIncorrectChoiceInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedIncorrectChoiceIdx, TrialDataTable.FeedbackWaitingTime(CueSortedIncorrectChoiceIdx),...
                                                                   'Marker', '.',...
                                                                   'MarkerSize', 4,...
                                                                   'MarkerEdgeColor', scarlet .* CuedPalette(i,:),...
                                                                   'LineStyle', 'none');
                    
                end
                
                TrialInvestedTimeLegend = legend(TrialInvestedTimeAxes, Label,...
                                                 'Position', [0.01    0.58    0.28    0.02],...
                                                 'NumColumns', 2);

                set(TrialInvestedTimeAxes,...
                    'TickDir', 'out',...
                    'Xlim', TrialOverviewAxes.XLim,...
                    'XTickLabel', [],...
                    'XAxisLocation', 'top',...
                    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                    'YAxisLocation', 'right',...
                    'FontSize', 10);
                ylabel('Invested Time (s)')
                disp('YOu aRE a bEAutIFul HUmaN BeiNG.')
                % title('Block switching behaviour')
            end
        end

    case 'CuedBlockTau' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(RatName, '_', SessionDateTime, '_CuedBlockTau', 'Interpreter', 'none'))

        %% sample time per cue
        SampleTimeAxes = axes(FigHandle, 'Position', [0.76    0.57    0.22    0.13]);
        hold(SampleTimeAxes, 'on');
        
        NotBrokeFixationTrialData = TrialDataTable(~isnan(TrialDataTable.EarlyWithdrawal), :);
        SampleTimeSwarmchat = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeSwarmchat(i) = swarmchart(SampleTimeAxes, NotBrokeFixationTrialData(NotBrokeFixationTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                'TrialRewardProb', 'SampleTime',...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', CuedPalette(i,:),...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 0.15);
        end
        
        StimulusTimeCutOffLine = line(SampleTimeAxes,...
                                      'xdata', [0, 1],...
                                      'ydata', [1, 1] * SessionData.SettingsFile.GUI.StimulusTime,...
                                      'LineStyle', ':',...
                                      'Marker', 'none');
        
        set(SampleTimeAxes,...
            'TickDir', 'out',...
            'XLim', [0, 1],...
            'YLim', [0, 1],...
            'FontSize', 10);
        title('Sampling Time', 'FontSize', 12)
        xlabel(SampleTimeAxes, '')
        ylabel(SampleTimeAxes, 'Time (s)')
        
        SampleTimeBoxChart = boxchart(SampleTimeAxes, NotBrokeFixationTrialData.TrialRewardProb, NotBrokeFixationTrialData.SampleTime);
        set(SampleTimeBoxChart,...
            'BoxWidth', 0.05,...
            'BoxFaceColor', 'k',...
            'BoxFaceAlpha', 0,...
            'MarkerStyle', 'none',...
            'LineWidth', 0.2);
        
        SampleTimeStats = grpstats(NotBrokeFixationTrialData,...
                                   'TrialRewardProb', {'mean', 'std'},...
                                   'DataVars', 'SampleTime',...
                                   'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
        
        SampleTimeStatsText = [];
        for i = 1:length(RewardProbCategories)
            SampleTimeStatsText(i) = text(SampleTimeAxes, RewardProbCategories(i), -0.35,...
                                          sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                  SampleTimeStats.Count(i),...
                                                  SampleTimeStats.Mean(i),...
                                                  SampleTimeStats.Std(i)),...
                                          'FontSize', 10,...
                                          'HorizontalAlignment', 'center');
        end
        SampleTimeStatsText(i+1) = text(SampleTimeAxes, 0, -0.35,...
                                        sprintf('Count\nMean\nStd'),...
                                        'FontSize', 10,...
                                        'HorizontalAlignment', 'right');

        %% Single-session analysis
        if nTrials <= 2500 && nTrials >= 200
            %% Invested time per cue across session
            TrialInvestedTimeAxes = axes(FigHandle, 'Position', [0.01    0.60    0.48    0.11]);
            hold(TrialInvestedTimeAxes, 'on');
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                for i = 1:length(RewardProbCategories)
                    % NotBaited invested time per cue across session
                    CueSortedNotBaitedIdx = find(TrialDataTable.NotBaited & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    TrialNotBaitedInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedNotBaitedIdx, TrialDataTable.FeedbackWaitingTime(CueSortedNotBaitedIdx),...
                                                             'Marker', '.',...
                                                             'MarkerSize', 4,...
                                                             'MarkerEdgeColor', 1-CuedPalette(i,:),...
                                                             'Color', CuedPalette(i,:));
                    
                    Label{i} = sprintf('P(r) = %3.1f',...
                                       RewardProbCategories(i));
                    % [RValue, PValue] = corrcoef(TrialNotBaitedInvestedTimePlot(i).XData, TrialNotBaitedInvestedTimePlot(i).YData);
                    % CueSortedNotBaitedRvalue(i) = RValue(1, 2);
                    % CueSortedNotBaitedPValue(i) = PValue(1, 2);
                    % 
                    % Label{i} = sprintf('P(r) = %3.1f\nR = %5.2f\np = %6.3f',...
                    %                    RewardProbCategories(i),...
                    %                    CueSortedNotBaitedRvalue(i),...
                    %                    CueSortedNotBaitedPValue(i));
                end

                for i = 1:length(RewardProbCategories) % plot all NotBaited first for legend
                    % Incorrect invested time per Trial RewardProb (not Choice RewardProb) across session
                    CueSortedIncorrectChoiceIdx = find(TrialDataTable.IncorrectChoice == 1 & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    if isempty(CueSortedIncorrectChoiceIdx)
                        continue
                    end
                    TrialIncorrectChoiceInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedIncorrectChoiceIdx, TrialDataTable.FeedbackWaitingTime(CueSortedIncorrectChoiceIdx),...
                                                                   'Marker', '.',...
                                                                   'MarkerSize', 4,...
                                                                   'MarkerEdgeColor', scarlet .* CuedPalette(i,:),...
                                                                   'LineStyle', 'none');
                    
                end
                
                TrialInvestedTimeLegend = legend(TrialInvestedTimeAxes, Label,...
                                                 'Position', [0.01    0.58    0.28    0.02],...
                                                 'NumColumns', 2);

                set(TrialInvestedTimeAxes,...
                    'TickDir', 'out',...
                    'Xlim', TrialOverviewAxes.XLim,...
                    'XTickLabel', [],...
                    'XAxisLocation', 'top',...
                    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                    'YAxisLocation', 'right',...
                    'FontSize', 10);
                ylabel('Invested Time (s)')
                disp('YOu aRE a bEAutIFul HUmaN BeiNG.')
                % title('Block switching behaviour')
            end
        end
end